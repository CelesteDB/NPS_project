sat.da.agg.a.data1 <- datanostro[-id,]
id1 <- which(sat.da.agg.a.data1$`Satellite Name` %in% datainiz$`Current Official Name of Satellite`)
sat.da.agg.a.data1$'Lunch Mass kg(.)' <- vector("character", length = nrow(sat.da.agg.a.data1))
sat.da.agg.a.data1$`Lunch Mass kg(.)` <- datainiz$`Launch Mass (kg.)`[id1]
names(data1) <- c("Satellite Name", "Country", "Users", "Purpose", "Orbit", "Longitude of GEO","Perigee", "Apogee", "Eccentricity", "Inclination", "Period", "Mass", "Launch Date","Expected Lifetime",  "Final Date", "Status", "Effective Lifetime")
names(sat.da.agg.a.data1) <- c("Satellite Name" ,    "Country"  ,          "Users"   ,           "Purpose"   ,         "Orbit"     ,
"Longitude of GEO"  , "Perigee"  ,          "Apogee"    ,         "Eccentricity"  ,     "Inclination"  ,
"Period"      ,       "Mass"        ,       "Launch Date"   ,     "Status"        ,     "Final Date"      ,
"Effective Lifetime" ,"Expected Lifetime" , "Continent"     ,     "Mass" )
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-18]
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-12]
View(sat.da.agg.a.data1)
data1<- data1[, names(sat.da.agg.a.data1)]
View(data1)
joinData <- rbind(sat.da.agg.a.data1,data1)
joinData <- cbind(sat.da.agg.a.data1,data1)
joinData <- rbind(sat.da.agg.a.data1,data1)
colnames(data1)
colnmaes(sat.da.agg.a.data1)
colnames(sat.da.agg.a.data1)
summary(data1)
summary(sat.da.agg.a.data1)
class(data1)
library(dplyr)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
data1$Apogee <- as.numeric(data1$Apogee)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
sat.da.agg.a.data1$`Launch Date`<-as.character(sat.da.agg.a.data1$`Launch Date`)
library(dplyr)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
sat.da.agg.a.data1$`Final Date`<-as.character(sat.da.agg.a.data1$`Final Date`)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
data1$`Effective Lifetime`<-as.numeric(data1$`Effective Lifetime`)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
View(joinData)
table(JoinData$Status)
table(joinData$Status)
df <- data.frame()
for (colonna in colnames(joinData)) {
conteggio_na <- sum(is.na(joinData[[colonna]]))
df <- rbind(df, data.frame(Colonna = colonna, Numero_di_NA = conteggio_na))
}
df
library(openxlsx)
write.xlsx(joinData, rowNames = FALSE)
getwd()
path = "C:/Users/alessandro/Documents/GitHub/NPS_project/Src"
write.xlsx(joinData,path, rowNames = FALSE)
View(joinData)
as.Date(joinData$`Launch Date`)
sat.da.agg.a.data1 <- datanostro[-id,]
id1 <- which(sat.da.agg.a.data1$`Satellite Name` %in% datainiz$`Current Official Name of Satellite`)
sat.da.agg.a.data1$'Lunch Mass kg(.)' <- vector("character", length = nrow(sat.da.agg.a.data1))
sat.da.agg.a.data1$`Lunch Mass kg(.)` <- datainiz$`Launch Mass (kg.)`[id1]
names(data1) <- c("Satellite Name", "Country", "Users", "Purpose", "Orbit", "Longitude of GEO","Perigee", "Apogee", "Eccentricity", "Inclination", "Period", "Mass", "Launch Date","Expected Lifetime",  "Final Date", "Status", "Effective Lifetime")
names(sat.da.agg.a.data1) <- c("Satellite Name" ,    "Country"  ,          "Users"   ,           "Purpose"   ,         "Orbit"     ,
"Longitude of GEO"  , "Perigee"  ,          "Apogee"    ,         "Eccentricity"  ,     "Inclination"  ,
"Period"      ,       "Mass"        ,       "Launch Date"   ,     "Status"        ,     "Final Date"      ,
"Effective Lifetime" ,"Expected Lifetime" , "Continent"     ,     "Mass" )
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-18]
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-12]
data1<- data1[, names(sat.da.agg.a.data1)]
data1$Apogee <- as.numeric(data1$Apogee)
View(sat.da.agg.a.data1)
data1$`Effective Lifetime`<-as.numeric(data1$`Effective Lifetime`)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
data1$`Launch Date`<-as.Date(data1$`Launch Date`)
data1$`Launch Date`<-as.Date(data1$`Launch Date`)
View(data1)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
id2 <- which(data2$OBJECT_ID %in% data1$`COSPAR Number`)
data2 <- data2[id2,c(2,9)]
id <- which(data2$DECAY_DATE == "")
data2 <- data2[-id,]
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
columns_to_remove <- c("Name of Satellite, Alternate Names", "Country/Org of UN Registry", "Operator/Owner", "Detailed Purpose", "Type of Orbit", "Contractor", "Launch Site", "Launch Vehicle", "COSPAR Number", "NORAD Number", "Comments", "...32", "Source Used for Orbital Data", "Source...34", "Source...35", "Source...36", "Source...37", "Source...38", "Source...39", "Source...40")
data1 <- data1[, -c(which(names(data1) %in% columns_to_remove), 41:68)]
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data1 <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(datainiz$`COSPAR Number` %in% data2$OBJECT_ID)
id2 <- which(data2$OBJECT_ID %in% data1$`COSPAR Number`)
data2 <- data2[id2,c(2,9)]
id <- which(data2$DECAY_DATE == "")
data2 <- data2[-id,]
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
columns_to_remove <- c("Name of Satellite, Alternate Names", "Country/Org of UN Registry", "Operator/Owner", "Detailed Purpose", "Type of Orbit", "Contractor", "Launch Site", "Launch Vehicle", "COSPAR Number", "NORAD Number", "Comments", "...32", "Source Used for Orbital Data", "Source...34", "Source...35", "Source...36", "Source...37", "Source...38", "Source...39", "Source...40")
data1 <- data1[, -c(which(names(data1) %in% columns_to_remove), 41:68)]
data1 <- data1[, -c(17:24)]
data1$`Disposal Date` <- vector("character", length = nrow(data1))
data1$`Disposal Date`[id1] <- data2$DECAY_DATE
id <- which(data1$`Disposal Date` == "")
# dataset con disposal date
data1 <- data1[-id,]
datanostro <- read_excel("../Dataset/Data_Satellites.xlsx", col_names = TRUE)
id <- which(data1$`Current Official Name of Satellite` %in% datanostro$`Satellite Name`)
data1$`Dry Mass (kg.)` <- as.numeric(data1$`Dry Mass (kg.)`)
data1$`Longitude of GEO (degrees)` <- as.numeric(data1$`Longitude of GEO (degrees)`)
columns_to_remove <- c("Power (watts)", "Dry Mass (kg.)")
data1 <- data1[, -which(names(data1) %in% columns_to_remove)]
data1$Status <- 'retired'
data1$`Effective Lifetime` <- vector("character", length = nrow(data1))
sat.da.agg.a.data1 <- datanostro[-id,]
id1 <- which(sat.da.agg.a.data1$`Satellite Name` %in% datainiz$`Current Official Name of Satellite`)
sat.da.agg.a.data1$'Lunch Mass kg(.)' <- vector("character", length = nrow(sat.da.agg.a.data1))
sat.da.agg.a.data1$`Lunch Mass kg(.)` <- datainiz$`Launch Mass (kg.)`[id1]
View(data1)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data1 <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(datainiz$`COSPAR Number` %in% data2$OBJECT_ID)
id2 <- which(data2$OBJECT_ID %in% data1$`COSPAR Number`)
data2 <- data2[id2,c(2,9)]
id <- which(data2$DECAY_DATE == "")
data2 <- data2[-id,]
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
columns_to_remove <- c("Name of Satellite, Alternate Names", "Country/Org of UN Registry", "Operator/Owner", "Detailed Purpose", "Type of Orbit", "Contractor", "Launch Site", "Launch Vehicle", "COSPAR Number", "NORAD Number", "Comments", "...32", "Source Used for Orbital Data", "Source...34", "Source...35", "Source...36", "Source...37", "Source...38", "Source...39", "Source...40")
data1 <- data1[, -c(which(names(data1) %in% columns_to_remove), 41:68)]
View(data1)
View(datainiz)
datainiz$`Date of Launch`<-as.POSIXct(datainiz$`Date of Launch`)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
View(datainiz)
View(datainiz)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
View(datainiz)
datainiz$`Date of Launch`<-as.Date(datainiz$`Date of Launch`)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
View(datainiz)
class(datainiz$`Date of Launch`)
datainiz$`Date of Launch`<- as.Date(datainiz$`Date of Launch, format = "%Y-%m-%d")
View(datainiz)
View(datainiz)
datainiz$`Date of Launch`<- as.Date(datainiz$`Date of Launch, format = "%Y-%m-%d")
datainiz$`Date of Launch`<- as.Date(datainiz$'Date of Launch', format = "%Y-%m-%d")
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
datainiz$`Date of Launch`<- as.POSIXct(datainiz$'Date of Launch', 'UTC')
View(datainiz)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
View(datainiz)
summary(datainiz)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
datainiz$`Date of Launch`<- as.POSIXct(datainiz$'Date of Launch', 'UTC')
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data1 <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(datainiz$`COSPAR Number` %in% data2$OBJECT_ID)
id2 <- which(data2$OBJECT_ID %in% data1$`COSPAR Number`)
data2 <- data2[id2,c(2,9)]
id <- which(data2$DECAY_DATE == "")
data2 <- data2[-id,]
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
columns_to_remove <- c("Name of Satellite, Alternate Names", "Country/Org of UN Registry", "Operator/Owner", "Detailed Purpose", "Type of Orbit", "Contractor", "Launch Site", "Launch Vehicle", "COSPAR Number", "NORAD Number", "Comments", "...32", "Source Used for Orbital Data", "Source...34", "Source...35", "Source...36", "Source...37", "Source...38", "Source...39", "Source...40")
data1 <- data1[, -c(which(names(data1) %in% columns_to_remove), 41:68)]
data1 <- data1[, -c(17:24)]
data1$`Disposal Date` <- vector("character", length = nrow(data1))
data1$`Disposal Date`[id1] <- data2$DECAY_DATE
id <- which(data1$`Disposal Date` == "")
# dataset con disposal date
data1 <- data1[-id,]
datanostro <- read_excel("../Dataset/Data_Satellites.xlsx", col_names = TRUE)
id <- which(data1$`Current Official Name of Satellite` %in% datanostro$`Satellite Name`)
data1$`Dry Mass (kg.)` <- as.numeric(data1$`Dry Mass (kg.)`)
data1$`Longitude of GEO (degrees)` <- as.numeric(data1$`Longitude of GEO (degrees)`)
columns_to_remove <- c("Power (watts)", "Dry Mass (kg.)")
data1 <- data1[, -which(names(data1) %in% columns_to_remove)]
data1$Status <- 'retired'
data1$`Effective Lifetime` <- vector("character", length = nrow(data1))
sat.da.agg.a.data1 <- datanostro[-id,]
id1 <- which(sat.da.agg.a.data1$`Satellite Name` %in% datainiz$`Current Official Name of Satellite`)
sat.da.agg.a.data1$'Lunch Mass kg(.)' <- vector("character", length = nrow(sat.da.agg.a.data1))
sat.da.agg.a.data1$`Lunch Mass kg(.)` <- datainiz$`Launch Mass (kg.)`[id1]
names(data1) <- c("Satellite Name", "Country", "Users", "Purpose", "Orbit", "Longitude of GEO","Perigee", "Apogee", "Eccentricity", "Inclination", "Period", "Mass", "Launch Date","Expected Lifetime",  "Final Date", "Status", "Effective Lifetime")
names(sat.da.agg.a.data1) <- c("Satellite Name" ,    "Country"  ,          "Users"   ,           "Purpose"   ,         "Orbit"     ,
"Longitude of GEO"  , "Perigee"  ,          "Apogee"    ,         "Eccentricity"  ,     "Inclination"  ,
"Period"      ,       "Mass"        ,       "Launch Date"   ,     "Status"        ,     "Final Date"      ,
"Effective Lifetime" ,"Expected Lifetime" , "Continent"     ,     "Mass" )
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-18]
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-12]
data1<- data1[, names(sat.da.agg.a.data1)]
data1$Apogee <- as.numeric(data1$Apogee)
View(data1)
# Caricare la libreria
library(openxlsx)
path = "C:/Users/alessandro/Documents/GitHub/NPS_project/Src"
# Scrivere il dataframe nel file Excel
write.xlsx(data1,path, rowNames = FALSE)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
View(datainiz)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
View(datainiz)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
View(datainiz)
install.packages("openxlsx")
library(openxlsx)
datainiz <- read.xlsx("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
datainiz <- read.xlsx("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx")
View(datainiz)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE,  col_types = "date")
View(datainiz)
View(datainiz)
View(datainiz)
View(datainiz)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE,   cols(Date Of Launch) = "date"))
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE, col_types = cols(Date of Launch) = "date"))
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE, col_types = cols('Date of Launch') = "date"))
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE, col_types = cols(Date of Launch = "date"))
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE, col_types = cols('Date of Launch' = "date"))
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE, col_types = list('Date of Launch' = "date"))
View(datainiz)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE)
View(datainiz)
class(datainiz$`Date of Launch`)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE)
View(datainiz)
library(readxl)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023 (1).xlsx", col_names = TRUE)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE)
View(datainiz)
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE, col_types = "guess" )
View(datainiz)
types = c(rep('guess'),68)
types[20] = 'date'
types = rep('guess',68)
types[20] = 'date'
library(readxl)
types = rep('guess',68)
types[20] = 'date'
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE, col_types = types )
View(datainiz)
data1 <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE, col_types = types)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(datainiz$`COSPAR Number` %in% data2$OBJECT_ID)
id2 <- which(data2$OBJECT_ID %in% data1$`COSPAR Number`)
data2 <- data2[id2,c(2,9)]
id <- which(data2$DECAY_DATE == "")
data2 <- data2[-id,]
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
columns_to_remove <- c("Name of Satellite, Alternate Names", "Country/Org of UN Registry", "Operator/Owner", "Detailed Purpose", "Type of Orbit", "Contractor", "Launch Site", "Launch Vehicle", "COSPAR Number", "NORAD Number", "Comments", "...32", "Source Used for Orbital Data", "Source...34", "Source...35", "Source...36", "Source...37", "Source...38", "Source...39", "Source...40")
data1 <- data1[, -c(which(names(data1) %in% columns_to_remove), 41:68)]
data1 <- data1[, -c(17:24)]
data1$`Disposal Date` <- vector("character", length = nrow(data1))
data1$`Disposal Date`[id1] <- data2$DECAY_DATE
id <- which(data1$`Disposal Date` == "")
# dataset con disposal date
data1 <- data1[-id,]
datanostro <- read_excel("../Dataset/Data_Satellites.xlsx", col_names = TRUE)
id <- which(data1$`Current Official Name of Satellite` %in% datanostro$`Satellite Name`)
data1$`Dry Mass (kg.)` <- as.numeric(data1$`Dry Mass (kg.)`)
data1$`Longitude of GEO (degrees)` <- as.numeric(data1$`Longitude of GEO (degrees)`)
columns_to_remove <- c("Power (watts)", "Dry Mass (kg.)")
data1 <- data1[, -which(names(data1) %in% columns_to_remove)]
data1$Status <- 'retired'
data1$`Effective Lifetime` <- vector("character", length = nrow(data1))
sat.da.agg.a.data1 <- datanostro[-id,]
id1 <- which(sat.da.agg.a.data1$`Satellite Name` %in% datainiz$`Current Official Name of Satellite`)
sat.da.agg.a.data1$'Lunch Mass kg(.)' <- vector("character", length = nrow(sat.da.agg.a.data1))
sat.da.agg.a.data1$`Lunch Mass kg(.)` <- datainiz$`Launch Mass (kg.)`[id1]
names(data1) <- c("Satellite Name", "Country", "Users", "Purpose", "Orbit", "Longitude of GEO","Perigee", "Apogee", "Eccentricity", "Inclination", "Period", "Mass", "Launch Date","Expected Lifetime",  "Final Date", "Status", "Effective Lifetime")
names(sat.da.agg.a.data1) <- c("Satellite Name" ,    "Country"  ,          "Users"   ,           "Purpose"   ,         "Orbit"     ,
"Longitude of GEO"  , "Perigee"  ,          "Apogee"    ,         "Eccentricity"  ,     "Inclination"  ,
"Period"      ,       "Mass"        ,       "Launch Date"   ,     "Status"        ,     "Final Date"      ,
"Effective Lifetime" ,"Expected Lifetime" , "Continent"     ,     "Mass" )
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-18]
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-12]
data1<- data1[, names(sat.da.agg.a.data1)]
data1$Apogee <- as.numeric(data1$Apogee)
sat.da.agg.a.data1$`Final Date`<-as.character(sat.da.agg.a.data1$`Final Date`)
data1$`Effective Lifetime`<-as.numeric(data1$`Effective Lifetime`)
library(dplyr)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
table(joinData$Status)
View(joinData)
# Caricare la libreria
library(openxlsx)
path = "C:/Users/alessandro/Documents/GitHub/NPS_project/Src"
# Scrivere il dataframe nel file Excel
write.xlsx(joinData,path, rowNames = FALSE)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
library(readxl)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
View(data)
paesi <- data$Country
dataframe_paesi <- data.frame(paese = paesi)
esa <- which(paesi == 'ESA')
multinat <- which(paesi == 'Multinational')
# Usa la funzione countrycode per ottenere il continente
continente <- countrycode(sourcevar = dataframe_paesi$paese, origin = "country.name", destination = "continent")
library(countrycode)
library(countrycode)
# Crea un dataframe di esempio con i paesi
dataframe_paesi <- data.frame(paese = paesi)
esa <- which(paesi == 'ESA')
multinat <- which(paesi == 'Multinational')
# Usa la funzione countrycode per ottenere il continente
continente <- countrycode(sourcevar = dataframe_paesi$paese, origin = "country.name", destination = "continent")
continente[esa] = 'Europe'
continente[multinat] = 'Multinational'
data <- cbind(data,Continent = continente)
getwd()
write.xlsx(data, file = 'JoinDatasets.xlsx', rowNames = FALSE)
library(openxlsx)
# Specifica il percorso del file Excel in cui desideri salvare il dataset
percorso_file <- "percorso/del/tuo/file/nomefile.xlsx"
# Salva il dataset in Excel
write.xlsx(data, file = 'JoinDatasets.xlsx', rowNames = FALSE)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
library(ggplot2)
library(png)
Occorrenze <- table(data$Country)
df <- as.data.frame(Occorrenze)
# Unisci i dati geografici con le occorrenze
world_map <- map_data("world")
merged_data <- merge(world_map, df, by.x = "region", by.y = "Var1", all.x = TRUE)
merged_data <- merged_data[,c(1:5,7)]
# Crea il ggplot con geo_map
ggplot() +
geom_map(data = df, map = world_map, aes(map_id = Var1, fill = Freq),
color = "white", size = 0.5) +
geom_map(data = world_map, map = world_map, aes(map_id = region),
color = "black", size = 0.5, fill = NA) +
expand_limits(x = world_map$long, y = world_map$lat) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Satellites") +
theme_minimal() +
labs(title = "Where are the satellites in our dataset?")
View(data)
Occorrenze <- table(data$Country)
Occorrenze
# Crea il ggplot con geo_map
ggplot() +
geom_map(data = df, map = world_map, aes(map_id = Var1, fill = Freq),
color = "white", size = 0.5) +
geom_map(data = world_map, map = world_map, aes(map_id = region),
color = "black", size = 0.5, fill = NA) +
expand_limits(x = world_map$long, y = world_map$lat) +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Satellites") +
theme_minimal() +
labs(title = "Where are the satellites in our dataset?")
Stati <- unique(data$Continent)
Occorrenze <- table(data$Continent)
df <- as.data.frame(Occorrenze)
ggplot(df, aes(x = "", y = Occorrenze, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
theme_minimal() +
scale_fill_viridis_d()+
labs(title = "How many satellites for each country?", fill = "Country", x = "", y = " ")
Occorrenze <- table(data$Users)
df <- as.data.frame(Occorrenze)
ggplot(df, aes(x = "", y = Occorrenze, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
theme_minimal() +
scale_fill_viridis_d()+
labs(title = "How many satellites for each use?", fill = 'Users', x = "", y = " ")
View(data)
Occorrenze <- table(data$Purpose)
df <- as.data.frame(Occorrenze)
ggplot(df, aes(x = "", y = Occorrenze, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
theme_minimal() +
scale_fill_viridis_d()+
labs(title = "How many satellites for each purpose?", fill = 'Purpose', x = "", y = " ")
Occorrenze
View(data)
Occorrenze <- table(data$Country)
tbale(data$Continent)
table(data$Continent)
library(readxl)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
count(unique(data$`Satellite Name`))
unique(data$`Satellite Name`)
length(unique(data$`Satellite Name`))
View(data)
library(readxl)
types = rep('guess',68)
types[20] = 'date'
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE, col_types = types )
data1 <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE, col_types = types)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(datainiz$`COSPAR Number` %in% data2$OBJECT_ID)
id2 <- which(data2$OBJECT_ID %in% data1$`COSPAR Number`)
data2 <- data2[id2,c(2,9)]
id <- which(data2$DECAY_DATE == "")
data2 <- data2[-id,]
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
columns_to_remove <- c("Name of Satellite, Alternate Names", "Country/Org of UN Registry", "Operator/Owner", "Detailed Purpose", "Type of Orbit", "Contractor", "Launch Site", "Launch Vehicle", "COSPAR Number", "NORAD Number", "Comments", "...32", "Source Used for Orbital Data", "Source...34", "Source...35", "Source...36", "Source...37", "Source...38", "Source...39", "Source...40")
data1 <- data1[, -c(which(names(data1) %in% columns_to_remove), 41:68)]
data1 <- data1[, -c(17:24)]
data1$`Disposal Date` <- vector("character", length = nrow(data1))
data1$`Disposal Date`[id1] <- data2$DECAY_DATE
id <- which(data1$`Disposal Date` == "")
# dataset con disposal date
data1 <- data1[-id,]
datanostro <- read_excel("../Dataset/Data_Satellites.xlsx", col_names = TRUE)
id <- which(data1$`Current Official Name of Satellite` %in% datanostro$`Satellite Name`)
data1$`Dry Mass (kg.)` <- as.numeric(data1$`Dry Mass (kg.)`)
data1$`Longitude of GEO (degrees)` <- as.numeric(data1$`Longitude of GEO (degrees)`)
columns_to_remove <- c("Power (watts)", "Dry Mass (kg.)")  # TOGLIAMO DRY MASS
data1 <- data1[, -which(names(data1) %in% columns_to_remove)]
data1$Status <- 'retired'
data1$`Effective Lifetime` <- vector("character", length = nrow(data1))
sat.da.agg.a.data1 <- datanostro[-id,]
id1 <- which(sat.da.agg.a.data1$`Satellite Name` %in% datainiz$`Current Official Name of Satellite`)
sat.da.agg.a.data1$'Lunch Mass kg(.)' <- vector("character", length = nrow(sat.da.agg.a.data1))
sat.da.agg.a.data1$`Lunch Mass kg(.)` <- datainiz$`Launch Mass (kg.)`[id1]
names(data1) <- c("Satellite Name", "Country", "Users", "Purpose", "Orbit", "Longitude of GEO","Perigee", "Apogee", "Eccentricity", "Inclination", "Period", "Mass", "Launch Date","Expected Lifetime",  "Final Date", "Status", "Effective Lifetime")
names(sat.da.agg.a.data1) <- c("Satellite Name" ,    "Country"  ,          "Users"   ,           "Purpose"   ,         "Orbit"     ,
"Longitude of GEO"  , "Perigee"  ,          "Apogee"    ,         "Eccentricity"  ,     "Inclination"  ,
"Period"      ,       "Mass"        ,       "Launch Date"   ,     "Status"        ,     "Final Date"      ,
"Effective Lifetime" ,"Expected Lifetime" , "Continent"     ,     "Mass" )
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-18] # Rimuovo continent
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-12] # Rimuovo dry mass
data1<- data1[, names(sat.da.agg.a.data1)]
data1$Apogee <- as.numeric(data1$Apogee)
sat.da.agg.a.data1$`Final Date`<-as.character(sat.da.agg.a.data1$`Final Date`)
library(dplyr)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
data1$`Effective Lifetime`<-as.numeric(data1$`Effective Lifetime`)
library(dplyr)
joinData <- bind_rows(sat.da.agg.a.data1,data1)
table(joinData$Status)
View(joinData)
View(datainiz)
id <- datainiz$`Current Official Name of Satellite` == 'Cicero-8'
id <- which(datainiz$`Current Official Name of Satellite` == 'Cicero-8')
View(datainiz)
View(joinData)
# per lettura dataset se prendi file da github
library(readxl)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
summary(data)
data$Country[which(data$Country == "China/France")] <- "China"
data$Country[which(data$Country == "India/France")] <- "India"
data$Country[which(data$Country == "Japan/Singapore")] <- "Japan"
data$Country[which(data$Country == "Poland/UK")] <- "Poland"
data$Country[which(is.na(data$Continent))]
data$Continent[which(is.na(data$Continent))] <- "Asia"
data$Users[which(data$Users == "Civil/Government")] <- "Civil"
data$Users[which(data$Users == "Commercial/Civil")] <- "Commercial"
data$Users[which(data$Users == "Government/Civil")] <- "Government"
data$Users[which(data$Users == "Government/Commercial")] <- "Government"
data$Users[which(data$Users == "Military/Civil")] <- "Military"
data$Purpose[which(data$Purpose == "Communications/Technology Development")] <- "Communications"
data$Purpose[which(data$Purpose == "Earth Observation/Technology Development")] <- "Earth Observation"
data$Purpose[which(data$Purpose == "Earth/Space Observation")] <- "Earth Observation"
data$Country <- factor(data$Country, ordered = F)
print('Country')
table(data$Country)
data$Users <- factor(data$Users, ordered = F)
print('Users')
table(data$Users)
data$Purpose <- factor(data$Purpose, ordered = F)
print('Purpose')
table(data$Purpose)
data$Orbit <- factor(data$Orbit, ordered = F)
print('Orbit')
table(data$Orbit)
data$Status <- factor(data$Status, ordered = F)
print('Status')
table(data$Status)
data$Continent <- factor(data$Continent, ordered = F)
print('Continent')
table(data$Continent)
df <- data.frame()
for (colonna in colnames(data)) {
conteggio_na <- sum(is.na(data[[colonna]]))
df <- rbind(df, data.frame(Colonna = colonna, Numero_di_NA = conteggio_na))
}
df
cols <- c("Period", "Launch Date", "Mass")
data <- data[complete.cases(data[, cols]), ]
class(data$`Final Date`)
data$`Final Date` <- as.Date(data$`Final Date`)
data$`Final Date` <- as.POSIXct(data$`Final Date`)
class(data$`Final Date`)
data$`Effective Lifetime` <- round(as.numeric(data$`Final Date` - data$`Launch Date`)/365, digit = 2)
# Eliminare satelliti con tempi di vita effettivi negativi
data<- data[-which(data$`Effective Lifetime` < 0),]
df <- data.frame()
for (colonna in colnames(data)) {
conteggio_na <- sum(is.na(data[[colonna]]))
df <- rbind(df, data.frame(Colonna = colonna, Numero_di_NA = conteggio_na))
}
df
View(data)
