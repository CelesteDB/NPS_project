expLP = predict(cox, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata"))
for (i in 1:113) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
plot(timeS, surv, type = 'l', main = paste("Survival Curve for Satellite", i),
xlab = "Time", ylab = "Survival Probability")
}
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(1,2,4,7,10)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:113) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:113) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
#r <- c(2,4,7,8,10,14)
for (i in 1:r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
r <- c(2,4,7,8,10,14)
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
plot(data$Eccentricity)
plot(data$log.Eccentricity)
his(data$Eccentricity)
hist(data$Eccentricity)
hist(data$log.Eccentricity)
# Carica il pacchetto ggplot2
library(ggplot2)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = "lightblue", color = "black", bins = 20) +
labs(title = "Distribuzione di Eccentricity",
x = "Eccentricity",
y = "Frequenza") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = "lightgreen", color = "black", bins = 20) +
labs(title = "Distribuzione di log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
geom_histogram(fill = colore , color = "black", bins = 20) +
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 79, 124, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Distribuzione di Eccentricity",
x = "Eccentricity",
y = "Frequenza") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = "lightgreen", color = "black", bins = 20) +
labs(title = "Distribuzione di log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
colore <- rgb(0, 79, 100, maxColorValue = 255)
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 79, 100, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Eccentricity",
x = "Eccentricity",
y = "Frequenza") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 50, 100, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Eccentricity",
x = "Eccentricity",
y = "Frequenza") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 50, 90, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Eccentricity",
x = "Eccentricity",
y = "Frequenza") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 83, 125, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Eccentricity",
x = "Eccentricity",
y = "Frequenza") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 83, 125, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Eccentricity",
x = "Eccentricity",
y = "Frequency") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequency") +
theme_light()
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(x = "Eccentricity",
y = "Frequency") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(
x = "log(Eccentricity)",
y = "Frequency") +
theme_light()
AIC.cox6 = AIC(cox6)
time <- data$`Effective Lifetime`
status <- data$Status
cox6<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
time <- data$`Effective Lifetime`
status <- data$Status
cox6<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox6)
AIC.cox6 = AIC(cox6)
AIC.cox6
AIC.cox5bis = AIC(cox5bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1bis)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c("Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox2bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox2bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox2bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity + Inclination + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox2bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox3bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity  + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox3bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox3bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity  + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox3bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
AIC.cox5bis = AIC(cox5bis)
AIC.cox5bis
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1bis)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
time <- data$`Effective Lifetime`
status <- data$Status
cox6<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox6)
AIC.cox6 = AIC(cox6)
AIC.cox6
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
AIC.cox5bis = AIC(cox5bis)
AIC.cox5bis
ggcoxdiagnostics(cox5bis, type = "deviance")
save(p)
