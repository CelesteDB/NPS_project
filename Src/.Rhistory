theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
text = element_text(size=12, family="sans", color="black"))
plot(percentile(test.set$Period), res, type ='l')
plot(quantile(test.set$Period), res, type ='l')
quantile(test.set$Period)
probs = seq(1:100)
probs
quantile(test.set$Period, probs = seq(1:100)
)
seq(0:0.1:1)
quantile(test.set$Period, probs = seq(0,1,0.1))
quantile(test.set$Period, probs = seq(0,1,0.01))
plot(quantile(test.set$Period, probs = seq(0,1,0.01)), res, type ='l')
# Crea 100 suddivisioni casuali
splits <- split(res, rep(1:100, each = length(res) / 100))
# Calcola la mediana per ciascuna suddivisione
medians <- sapply(splits, median)
# Calcola la media delle mediane
media_delle_mediane <- mean(medians)
media_delle_mediane
medians
plot(quantile(test.set$Period, probs = seq(0,1,0.01)), medians, type ='l')
quantile(test.set$Period, probs = seq(0,1,0.01))
perc <- quantile(test.set$Period, probs = seq(0,1,0.01))
length(perc)
plot(perc[1:100], medians, type ='l')
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
summary(data)
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
test.set <- read_excel("../Dataset/TestSet.xlsx", col_names = TRUE)
i <- which(test.set$Purpose == 'Navigation' | test.set$Orbit == 'Elliptical' | test.set$Continent == 'Africa' | test.set$Continent == 'Multinational' | test.set$Continent == 'Oceania' )
test.set <- test.set[-i,]
table(test.set$Users, test.set$Status)
table(test.set$Purpose, test.set$Status)
table(test.set$Orbit, test.set$Status)
table(test.set$Continent, test.set$Status)
table(test.set$Status)
i <- which(test.set$Eccentricity == 0)
test.set$Eccentricity[i] = 1
test.set$log.Eccentricity <- -log(test.set$Eccentricity)
bashaz.train <- basehaz(cox5bis)
bashaz.train
table(bashaz.train$strata) # strata su orbit e Purpose --> 8 combinazioni in teoria
bashaz.test <- basehaz(cox5bis, test.set, centered=TRUE)
bashaz.test
table(bashaz.test$strata)
# technology DEvelopment, Geo non esiste
table(test.set$Orbit, test.set$Purpose)
# technology DEvelopment, Geo non esiste neanche nel test set -> buono
data.frame(bashaz.test)
p = data.frame(bashaz.test)
View(p)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
summary(data)
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
cox <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox)
test.set <- read_excel("../Dataset/TestSet.xlsx", col_names = TRUE)
i <- which(test.set$Purpose == 'Navigation' | test.set$Orbit == 'Elliptical' | test.set$Continent == 'Africa' | test.set$Continent == 'Multinational' | test.set$Continent == 'Oceania' )
test.set <- test.set[-i,]
table(test.set$Users, test.set$Status)
table(test.set$Purpose, test.set$Status)
table(test.set$Orbit, test.set$Status)
table(test.set$Continent, test.set$Status)
table(test.set$Status)
i <- which(test.set$Eccentricity == 0)
test.set$Eccentricity[i] = 1
test.set$log.Eccentricity <- -log(test.set$Eccentricity)
bashaz.train <- basehaz(cox)
bashaz.train
table(bashaz.train$strata) # strata su orbit e Purpose --> 8 combinazioni in teoria
bashaz.test <- basehaz(cox5, test.set, centered=TRUE)
bashaz.test <- basehaz(cox, test.set, centered=TRUE)
bashaz.test
table(bashaz.test$strata)
# technology DEvelopment, Geo non esiste
table(test.set$Orbit, test.set$Purpose)
# technology DEvelopment, Geo non esiste neanche nel test set -> buono
## S3 method for class 'coxph'
expLP = predict(cox5, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata", "sample", "zero"))
## S3 method for class 'coxph'
expLP = predict(cox, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata", "sample", "zero"))
id <- which(test.set$Status == 'retired')
diff <- predicted_lifetime$exp.dur[id] - test.set$`Effective Lifetime`[id]
coxed <- coxed::coxed(cox, newdata = test.set, method="npsf", bootstrap = TRUE, B=750)
predicted_lifetime <- coxed$exp.dur
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(1,2,4,7,10)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
bashaz.test <- basehaz(cox, test.set, centered=TRUE)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
cox <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox)
test.set <- read_excel("../Dataset/TestSet.xlsx", col_names = TRUE)
i <- which(test.set$Purpose == 'Navigation' | test.set$Orbit == 'Elliptical' | test.set$Continent == 'Africa' | test.set$Continent == 'Multinational' | test.set$Continent == 'Oceania' )
test.set <- test.set[-i,]
table(test.set$Users, test.set$Status)
table(test.set$Purpose, test.set$Status)
table(test.set$Orbit, test.set$Status)
table(test.set$Continent, test.set$Status)
table(test.set$Status)
i <- which(test.set$Eccentricity == 0)
test.set$Eccentricity[i] = 1
test.set$log.Eccentricity <- -log(test.set$Eccentricity)
bashaz.train <- basehaz(cox)
bashaz.train
table(bashaz.train$strata) # strata su orbit e Purpose --> 8 combinazioni in teoria
bashaz.test <- basehaz(cox, test.set, centered=TRUE)
bashaz.test
basehax.dataframe <- data.frame(bashaz.test)
table(bashaz.test$strata)
# technology DEvelopment, Geo non esiste
table(test.set$Orbit, test.set$Purpose)
# technology DEvelopment, Geo non esiste neanche nel test set -> buono
## S3 method for class 'coxph'
expLP = predict(cox, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata"))
for (i in 1:113) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
plot(timeS, surv, type = 'l', main = paste("Survival Curve for Satellite", i),
xlab = "Time", ylab = "Survival Probability")
}
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(1,2,4,7,10)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:113) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1.5) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:113) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
#r <- c(2,4,7,8,10,14)
for (i in 1:r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
r <- c(2,4,7,8,10,14)
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in 1:r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
data
library(ggplot2)
# Creazione del dataframe
data <- data.frame(hazard = numeric(), timeS = numeric(), strata = numeric(), survival =numeric())
#r <-  sample(1:113, 5, replace = FALSE)
r <- c(2,4,7,8,10,14)
for (i in r) {
haz <- basehax.dataframe[which(basehax.dataframe$strata == i), 1]
timeS <- basehax.dataframe[which(basehax.dataframe$strata == i), 2]
strata <- rep(i, length(haz))
curva <- haz * expLP[i]
surv <- exp(-cumsum(curva))
data <- rbind(data, data.frame(hazard = haz, timeS = timeS, strata = strata, survival =  surv))
}
# Calcola la curva di sopravvivenza per ogni strato
#data <- transform(data, survival = exp(-cumsum(hazard * expLP[strata])))
# Creazione del grafico utilizzando ggplot2
ggplot(data, aes(x = timeS, y = survival, color = factor(strata))) +
geom_line(size = 1) +
scale_color_discrete(name = "Strata") +
labs(x = "Time", y = "Survival Probability", title = "Survival Curves") +
theme_minimal() +
theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank())
