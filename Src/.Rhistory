geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 83, 125, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Eccentricity",
x = "Eccentricity",
y = "Frequenza") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequenza") +
theme_light()
# Carica il pacchetto ggplot2
library(ggplot2)
colore <- rgb(0, 83, 125, maxColorValue = 255)
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(title = "Eccentricity",
x = "Eccentricity",
y = "Frequency") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(title = "log(Eccentricity)",
x = "log(Eccentricity)",
y = "Frequency") +
theme_light()
# Istogramma per la colonna Eccentricity
ggplot(data, aes(x = Eccentricity)) +
geom_histogram(fill = colore , color = "black", bins = 20) +
labs(x = "Eccentricity",
y = "Frequency") +
theme_light()
# Istogramma per la colonna log.Eccentricity
ggplot(data, aes(x = log.Eccentricity)) +
geom_histogram(fill = colore, color = "black", bins = 20) +
labs(
x = "log(Eccentricity)",
y = "Frequency") +
theme_light()
AIC.cox6 = AIC(cox6)
time <- data$`Effective Lifetime`
status <- data$Status
cox6<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
time <- data$`Effective Lifetime`
status <- data$Status
cox6<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox6)
AIC.cox6 = AIC(cox6)
AIC.cox6
AIC.cox5bis = AIC(cox5bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1bis)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c("Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox2bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox2bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox2bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity + Inclination + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox2bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox3bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity  + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox3bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox3bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity  + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox3bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
AIC.cox5bis = AIC(cox5bis)
AIC.cox5bis
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1bis)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
time <- data$`Effective Lifetime`
status <- data$Status
cox6<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox6)
AIC.cox6 = AIC(cox6)
AIC.cox6
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
AIC.cox5bis = AIC(cox5bis)
AIC.cox5bis
ggcoxdiagnostics(cox5bis, type = "deviance")
save(p)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
summary(data)
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
test.set <- read_excel("../Dataset/TestSet.xlsx", col_names = TRUE)
i <- which(test.set$Purpose == 'Navigation' | test.set$Orbit == 'Elliptical' | test.set$Continent == 'Africa' | test.set$Continent == 'Multinational' | test.set$Continent == 'Oceania' )
test.set <- test.set[-i,]
table(test.set$Users, test.set$Status)
table(test.set$Purpose, test.set$Status)
table(test.set$Orbit, test.set$Status)
table(test.set$Continent, test.set$Status)
table(test.set$Status)
i <- which(test.set$Eccentricity == 0)
test.set$Eccentricity[i] = 1
test.set$log.Eccentricity <- -log(test.set$Eccentricity)
bashaz.train <- basehaz(cox5bis)
bashaz.train
table(bashaz.train$strata) # strata su orbit e Purpose --> 8 combinazioni in teoria
bashaz.test <- basehaz(cox5bis, test.set, centered=TRUE)
bashaz.test
table(bashaz.test$strata)
# technology DEvelopment, Geo non esiste
table(test.set$Orbit, test.set$Purpose)
# technology DEvelopment, Geo non esiste neanche nel test set -> buono
## S3 method for class 'coxph'
expLP = predict(cox5bis, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata", "sample", "zero"))
coxed <- coxed::coxed(cox5bis, newdata = test.set, method="npsf", bootstrap = TRUE, B=750)
predicted_lifetime <- coxed$exp.dur
predicted_lifetime
coxed <- coxed::coxed(cox5bis, newdata = test.set, method="gam", bootstrap = TRUE, B=750)
predicted_lifetime <- coxed$exp.dur
predicted_lifetime
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
coxed <- coxed::coxed(cox5bis, newdata = test.set, method="gam", bootstrap = TRUE, B=750)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
summary(data)
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1 <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1)
time <- data$`Effective Lifetime`
status <- data$Status
cox2 <- coxph(Surv(time,status == 'retired') ~ Perigee + Apogee + Eccentricity + Inclination + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox2)
test <- cox.zph(cox2)
test
time <- data$`Effective Lifetime`
status <- data$Status
cox3<- coxph(Surv(time,status == 'retired') ~ Perigee + Apogee + Eccentricity + Inclination + Period +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox3)
time <- data$`Effective Lifetime`
status <- data$Status
cox4<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity + Inclination + Period +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox4)
time <- data$`Effective Lifetime`
status <- data$Status
cox5<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity + Inclination  +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5)
time <- data$`Effective Lifetime`
status <- data$Status
cox6<- coxph(Surv(time,status == 'retired') ~  Apogee + Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox6)
test <- cox.zph(cox6)
test
ggcoxdiagnostics(cox6, type = "scaledsch")
ggcoxdiagnostics(cox6, type = "martingale") # Diffcili da interpretare
ggcoxdiagnostics(cox6, type = "deviance")
AIC.cox6 = AIC(cox6)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1bis)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c("Apogee", 'log.Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox2bis <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox2bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox2bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity + Inclination + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox2bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox3bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity  + Period +
Mass + Users + strata(Purpose) + Continent + Orbit, data = data)
summary(cox3bis)
test <- cox.zph(cox3bis)
test
time <- data$`Effective Lifetime`
status <- data$Status
cox4bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity  + Period +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox4bis)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
test <- cox.zph(cox5bis)
test
ggcoxdiagnostics(cox5bis, type = "scaledsch")
ggcoxdiagnostics(cox5bis, type = "martingale")
ggcoxdiagnostics(cox5bis, type = "deviance")
AIC.cox5bis = AIC(cox5bis)
library(coxed)
ed1 <- coxed(cox5bis, method="npsf")
predlife=ed1$exp.dur
#mean and median of the predicted durations:
ed1$mean
ed1$median
# PLOT: The estimated cumulative baseline hazard function and survivor function
baseline <- gather(ed1$baseline.functions, cbh, survivor, key="survivefunction", value="value")
ggplot(baseline, aes(x=time, y=value)) +
geom_line() +
xlab("Time") +
ylab("Function") +
facet_wrap( ~ survivefunction, scales = "free")
test.set <- read_excel("../Dataset/TestSet.xlsx", col_names = TRUE)
i <- which(test.set$Purpose == 'Navigation' | test.set$Orbit == 'Elliptical' | test.set$Continent == 'Africa' | test.set$Continent == 'Multinational' | test.set$Continent == 'Oceania' )
test.set <- test.set[-i,]
table(test.set$Users, test.set$Status)
table(test.set$Purpose, test.set$Status)
table(test.set$Orbit, test.set$Status)
table(test.set$Continent, test.set$Status)
table(test.set$Status)
i <- which(test.set$Eccentricity == 0)
test.set$Eccentricity[i] = 1
test.set$log.Eccentricity <- -log(test.set$Eccentricity)
bashaz.train <- basehaz(cox5bis)
bashaz.train
table(bashaz.train$strata) # strata su orbit e Purpose --> 8 combinazioni in teoria
bashaz.test <- basehaz(cox5bis, test.set, centered=TRUE)
bashaz.test
table(bashaz.test$strata)
# technology DEvelopment, Geo non esiste
table(test.set$Orbit, test.set$Purpose)
# technology DEvelopment, Geo non esiste neanche nel test set -> buono
## S3 method for class 'coxph'
expLP = predict(cox5bis, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata", "sample", "zero"))
# a mano: Idea imprlementare quello che fa Coxed (Incluso bootstrap) in modo da poter usare strata
# Qui il link di coxed : https://github.com/jkropko/coxed/blob/master/R/coxed.R
coxed <- coxed::coxed(cox5bis, newdata = test.set, method="gam", bootstrap = TRUE, B=750)
predicted_lifetime <- coxed$exp.dur
id <- which(test.set$Status == 'retired')
diff <- predicted_lifetime$exp.dur[id] - test.set$`Effective Lifetime`[id]
plot(diff)
sqrt(sum(diff^2)/length(diff))
mean(diff)
median(diff)
#mean(test.set$`Effective Lifetime`[id])
# Calculate Concordance Index
c_index <- survConcordance(Surv(test.set$`Effective Lifetime`, predicted_lifetime$exp.dur) ~ predicted_lifetime$exp.dur)
print(paste("Concordance Index: ", c_index$concordance))
diff <- predicted_lifetime$exp.dur[id] - test.set$`Expected Lifetime`[id]
plot(diff)
sorted_lt <- predicted_lifetime[order(predicted_lifetime$exp.dur),]
t <- seq(0, max(test.set$`Effective Lifetime`), length = length(sorted_lt$exp.dur))
plot(t, sorted_lt$exp.dur, type = 'l', lwd = 2)
lines(t, sorted_lt$lb)
lines(t, sorted_lt$ub)
predicted_lifetime
coxed <- coxed::coxed(cox5bis, newdata = test.set, method="gam", bootstrap = TRUE, B=750)
predicted_lifetime <- coxed$exp.dur
err <- predicted_lifetime - test.set$`Effective Lifetime`
err
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
err
errnostro <- sum((predicted_lifetime$exp.dur - test.set$`Effective Lifetime`)^2)
errloro <- sum((test.set$`Expected Lifetime` - test.set$`Effective Lifetime`)^2)
errloro
errnostro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`)
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 20)
errnostro <- sum((predicted_lifetime$exp.dur - test.set$`Effective Lifetime`)^2)
errloro <- sum((test.set$`Expected Lifetime` - test.set$`Effective Lifetime`)^2)
id
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 20)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 20)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 18)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
id
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 19)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
id
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 18.5)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 18)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 17)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 16)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 20)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 19)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 20)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 21)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 19)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 19)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 18)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
id
coxed <- coxed::coxed(cox5bis, newdata = test.set, method="npsf", bootstrap = TRUE, B=750)
predicted_lifetime <- coxed$exp.dur
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 18)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 20)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 21)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 22)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 21)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
id
