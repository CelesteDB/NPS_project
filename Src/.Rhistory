# Load Data
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
# Load Data
library(readxl)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
id <- which(is.na(data$`Expected Lifetime`))
x1 <- data$`Effective Lifetime`[-id]
y1 <- data$`Expected Lifetime`[-id]
Paesi <- data$Continent[-id]
df <- data.frame(x1,y1,Paesi)
# Crea lo scatterplot
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
#scale_colour_viridis_d()+
theme_minimal()+
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
library(ggplot2)
id <- which(is.na(data$`Expected Lifetime`))
x1 <- data$`Effective Lifetime`[-id]
y1 <- data$`Expected Lifetime`[-id]
Paesi <- data$Continent[-id]
df <- data.frame(x1,y1,Paesi)
# Crea lo scatterplot
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
#scale_colour_viridis_d()+
theme_minimal()+
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
id <- which(is.na(data$`Expected Lifetime`))
x1 <- data$`Effective Lifetime`[-id]
y1 <- data$`Expected Lifetime`[-id]
Paesi <- data$Continent[-id]
df <- data.frame(x1,y1,Paesi)
# Crea lo scatterplot
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
scale_colour_viridis_d()+
theme_minimal()+
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
id <- which(is.na(data$`Expected Lifetime`))
x1 <- data$`Effective Lifetime`[-id]
y1 <- data$`Expected Lifetime`[-id]
Paesi <- data$Continent[-id]
df <- data.frame(x1,y1,Paesi)
# Crea lo scatterplot
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
scale_fill_brewer(palette = "PuBuGn")+
theme_minimal()+
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
scale_fill_brewer(palette = "PuBuGn")+
#theme_minimal()+
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
scale_color_brewer(palette = "Blues") +  # Impostazione della palette blu
theme_minimal() +
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot con linea di regressione tratteggiata
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed") + # Aggiunta della linea di regressione
scale_color_brewer(palette = "Blues") +  # Impostazione della palette blu
theme_minimal() +
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot con la bisettrice
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, color = "black", linetype = "dashed") + # Aggiunta della bisettrice
scale_color_brewer(palette = "Blues") +  # Impostazione della palette blu
theme_minimal() +
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot con la bisettrice
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, color = "black", linetype = "dashed") + # Aggiunta della bisettrice
scale_color_brewer(palette = "Blues") +  # Impostazione della palette blu
scale_fill_brewer(palette = "Blues") +  # Impostazione della palette blu per le aree di riempimento
theme_minimal() +
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot con la bisettrice
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, color = "black", linetype = "dashed") + # Aggiunta della bisettrice
scale_color_brewer(palette = "BuGn") +  # Impostazione della palette blu
theme_minimal() +
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot con la bisettrice
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, color = "black", linetype = "dashed") + # Aggiunta della bisettrice
scale_color_brewer(palette = "BuPu") +  # Impostazione della palette blu
theme_minimal() +
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
# Crea lo scatterplot con la bisettrice
ggplot(df, aes(x = x1, y = y1, color = Paesi)) +
geom_point(size = 3) +
geom_abline(intercept = 0, slope = 1, color = "black", linetype = "dashed") + # Aggiunta della bisettrice
scale_color_manual(values = c("blue", "skyblue", "grey")) +  # Impostazione dei colori blu, azzurro e grigio
theme_minimal() +
labs(title = "Effective lifetime vs Expected lifetime for Continent",
x = "Effective lifetime",
y = "Expected lifetime",
color = "Continent")
rm(list = ls())
library(readxl)
data <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE)
library(readxl)
data <- read_excel("../dataset/TrainingSet.xlsx", col_names = TRUE)
library(readxl)
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
library(tidyr)
summary(data)
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
i <- which(data$Purpose == 'Navigation' | data$Orbit == 'Elliptical' | data$Continent == 'Africa' | data$Continent == 'Multinational' | data$Continent == 'Oceania' )
data <- data[-i,]
table(data$Users, data$Status)
table(data$Purpose, data$Status)
table(data$Orbit, data$Status)
table(data$Continent, data$Status)
table(data$Status)
time <- data$`Effective Lifetime`
status <- data$Status
covariates <- c( "Perigee" ,"Apogee", 'Eccentricity', "Inclination", "Period", "Mass", "Users", "Purpose", "Continent", "Orbit")
cox1 <- coxph(Surv(time,status == 'retired') ~ ., data = data[,covariates])
summary(cox1)
i <- which(data$Eccentricity == 0)
data$Eccentricity[i] = 1
data$log.Eccentricity <- -log(data$Eccentricity)
time <- data$`Effective Lifetime`
status <- data$Status
cox5bis <- coxph(Surv(time,status == 'retired') ~  Apogee + log.Eccentricity   +
Mass + Users + strata(Purpose) + Continent + strata(Orbit), data = data)
summary(cox5bis)
library(coxed)
ed1 <- coxed(cox5bis, method="npsf")
predlife=ed1$exp.dur
#mean and median of the predicted durations:
ed1$mean
ed1$median
# PLOT: The estimated cumulative baseline hazard function and survivor function
baseline <- gather(ed1$baseline.functions, cbh, survivor, key="survivefunction", value="value")
ggplot(baseline, aes(x=time, y=value)) +
geom_line() +
xlab("Time") +
ylab("Function") +
facet_wrap( ~ survivefunction, scales = "free")
test.set <- read_excel("../Dataset/TestSet.xlsx", col_names = TRUE)
table(test.set$Users, test.set$Status)
table(test.set$Purpose, test.set$Status)
table(test.set$Orbit, test.set$Status)
table(test.set$Continent, test.set$Status)
table(test.set$Status)
i <- which(test.set$Eccentricity == 0)
test.set$Eccentricity[i] = 1
test.set$log.Eccentricity <- -log(test.set$Eccentricity)
## S3 method for class 'coxph'
expLP = predict(cox5bis, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata", "sample", "zero"))
i <- which(test.set$Purpose == 'Navigation' | test.set$Orbit == 'Elliptical' | test.set$Continent == 'Africa' | test.set$Continent == 'Multinational' | test.set$Continent == 'Oceania' )
test.set <- test.set[-i,]
table(test.set$Users, test.set$Status)
table(test.set$Purpose, test.set$Status)
table(test.set$Orbit, test.set$Status)
table(test.set$Continent, test.set$Status)
table(test.set$Status)
## S3 method for class 'coxph'
expLP = predict(cox5bis, test.set,
#type=c("lp", "risk", "expected", "terms", "survival"),
type = 'risk',
reference=c("strata", "sample", "zero"))
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
coxed <- coxed::coxed(cox5bis, newdata = test.set, method="gam", bootstrap = TRUE, B=750)
predicted_lifetime <- coxed$exp.dur
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 18)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
id
# SE USI npsf
err <- predicted_lifetime$exp.dur - test.set$`Effective Lifetime`
id <- which( abs(err) > 19)
errnostro <- sum((predicted_lifetime$exp.dur[-id] - test.set$`Effective Lifetime`[-id])^2)
errloro <- sum((test.set$`Expected Lifetime`[-id] - test.set$`Effective Lifetime`[-id])^2)
errnostro
errloro
id
test.set[id,1]
set.seed(123)
library(caret)
#prendo come training test le osservazioni senza expected life time
idna <- which(is.na(data$`Expected Lifetime`))
training_set0 <- data[idna,]
dim(training_set0) #217 obs
#ci aggiungo altre osservazioni per arrivare all'80% del dataset (ne mancano altre 357)
sub <- data[-idna,] # dataset con expected lifetime con 497 obs
index <- createDataPartition(sub$`Effective Lifetime`, p = 0.715, list = FALSE)
# Crea il training set utilizzando l'indice
training_set1 <- sub[index,]
#concateno
training_set <- bind_rows(training_set0, training_set1)
dim(training_set)
test_set <- sub[-index, ]
dim(test_set)
test.set[id,1]
write.xlsx(test_set, file = 'TestSet.xlsx', rowNames = FALSE)
k <- integer(0)
for(i in 1:113){
if(test.set[id,1] == test.set[i,1])
k <- c(k)
}
which(test.set[id,1] == test.set[,1])
test.set[id,1]
