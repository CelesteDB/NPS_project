p_val #0.013
purpose = as.factor(data$Purpose)
g = nlevels(purpose)
n = dim(data)[1]
plot(purpose, explife, xlab='purpose',col=rainbow(g),main='Original Data')
fit_p <- aov(explife ~ purpose)
summary(fit_p)
T0 <- summary(fit_p)[[1]][1,4]  # extract the test statistic
T0
T_stat <- numeric(B)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
explife_perm <- explife[permutation]
fit_perm <- aov(explife_perm ~ purpose)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,80))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val #0
users = as.factor(data$Users)
g = nlevels(users)
n = dim(data)[1]
plot(users, explife, xlab='users',col=rainbow(g),main='Original Data')
fit_u <- aov(explife ~ users)
summary(fit_u)
T0 <- summary(fit_u)[[1]][1,4]  # extract the test statistic
T0
T_stat <- numeric(B)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
explife_perm <- explife[permutation]
fit_perm <- aov(explife_perm ~ users)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,80))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val #0
summary.aov(aov(explife ~ continent + purpose + continent:purpose)) #interaction is not significant
T0_cp <- summary.aov(aov(explife ~ continent + purpose + continent:purpose))[[1]][3,4]
T0_cp
aov.H0cp <- aov(explife ~ continent + purpose) #reduced model
aov.H0cp
residuals.H0cp <- aov.H0cp$residuals
T_cp<- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0cp <- residuals.H0cp[permutation]
explife.perm.H0cp <- aov.H0cp$fitted + residuals.H0cp
T_cp[perm] <- summary.aov(aov(explife.perm.H0cp ~ continent + purpose + continent:purpose))[[1]][3,4]
}
sum(T_cp >= T0_cp)/B
summary.aov(aov(explife ~ users + purpose + users:purpose)) #interaction is not significant
T0_cp <- summary.aov(aov(explife ~ users + purpose + users:purpose))[[1]][3,4]
T0_cp
aov.H0cp <- aov(explife ~ users + purpose) #reduced model
aov.H0cp
residuals.H0cp <- aov.H0cp$residuals
T_cp<- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0cp <- residuals.H0cp[permutation]
explife.perm.H0cp <- aov.H0cp$fitted + residuals.H0cp
T_cp[perm] <- summary.aov(aov(explife.perm.H0cp ~ users + purpose + users:purpose))[[1]][3,4]
}
sum(T_cp >= T0_cp)/B
n
which(is.na(data$Purpose))
table(data$Continent)
table(data$Purpose)
# per lettura dataset se prendi file da github
library(readxl)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
data$Country[which(data$Country == "China/France")] <- "China"
data$Country[which(data$Country == "India/France")] <- "India"
data$Country[which(data$Country == "Japan/Singapore")] <- "Japan"
data$Country[which(data$Country == "Poland/UK")] <- "Poland"
data$Country[which(is.na(data$Continent))]
data$Continent[which(is.na(data$Continent))] <- "Asia"
data$Users[which(data$Users == "Civil/Government")] <- "Civil"
data$Users[which(data$Users == "Commercial/Civil")] <- "Commercial"
data$Users[which(data$Users == "Government/Civil")] <- "Government"
data$Users[which(data$Users == "Government/Commercial")] <- "Government"
data$Users[which(data$Users == "Military/Civil")] <- "Military"
data$Purpose[which(data$Purpose == "Communications/Technology Development")] <- "Communications"
data$Purpose[which(data$Purpose == "Earth Observation/Technology Development")] <- "Earth Observation"
data$Purpose[which(data$Purpose == "Earth/Space Observation")] <- "Earth Observation"
data$Country <- factor(data$Country, ordered = F)
print('Country')
table(data$Country)
data$Users <- factor(data$Users, ordered = F)
print('Users')
table(data$Users)
data$Purpose <- factor(data$Purpose, ordered = F)
print('Purpose')
table(data$Purpose)
data$Orbit <- factor(data$Orbit, ordered = F)
print('Orbit')
table(data$Orbit)
data$Status <- factor(data$Status, ordered = F)
print('Status')
table(data$Status)
data$Continent <- factor(data$Continent, ordered = F)
print('Continent')
table(data$Continent)
df <- data.frame()
for (colonna in colnames(data)) {
conteggio_na <- sum(is.na(data[[colonna]]))
df <- rbind(df, data.frame(Colonna = colonna, Numero_di_NA = conteggio_na))
}
df
cols <- c("Period", "Launch Date", "Mass")
data <- data[complete.cases(data[, cols]), ]
class(data$`Final Date`)
data$`Final Date` <- as.Date(data$`Final Date`)
data$`Final Date` <- as.POSIXct(data$`Final Date`)
class(data$`Final Date`)
data$`Effective Lifetime` <- round(as.numeric(data$`Final Date` - data$`Launch Date`)/365, digit = 2)
# Eliminare satelliti con tempi di vita effettivi negativi
data<- data[-which(data$`Effective Lifetime` < 0),]
df <- data.frame()
for (colonna in colnames(data)) {
conteggio_na <- sum(is.na(data[[colonna]]))
df <- rbind(df, data.frame(Colonna = colonna, Numero_di_NA = conteggio_na))
}
df
# VARIABILE PURPOSE
table(data$Purpose)
#tolgo l'osservazione con purpose unknown
id=which(data$Purpose=="Unknown")
data=data[-id,]
data$Purpose <- droplevels(data$Purpose)
# aggrego "Earth Science", "Educational" e "Surveillance" in "Earth Observation"
id=which(data$Purpose=="Earth Science")
data$Purpose[id]="Earth Observation"
id=which(data$Purpose=="Educational")
data$Purpose[id]="Earth Observation"
id=which(data$Purpose=="Surveillance")
data$Purpose[id]="Earth Observation"
data$Purpose <- droplevels(data$Purpose)
#aggrego "Technology Demonstration" in "Technology Development"
id=which(data$Purpose=="Technology Demonstration")
data$Purpose[id]="Technology Development"
data$Purpose <- droplevels(data$Purpose)
table(data$Purpose)
#VARIABILE CONTINENT
table(data$Continent)
# VARIABILE PURPOSE
table(data$Purpose)
#tolgo l'osservazione con purpose unknown
id=which(data$Purpose=="Unknown")
data=data[-id,]
data$Purpose <- droplevels(data$Purpose)
# aggrego "Earth Science", "Educational" e "Surveillance" in "Earth Observation"
id=which(data$Purpose=="Earth Science")
data$Purpose[id]="Earth Observation"
id=which(data$Purpose=="Educational")
data$Purpose[id]="Earth Observation"
id=which(data$Purpose=="Surveillance")
data$Purpose[id]="Earth Observation"
data$Purpose <- droplevels(data$Purpose)
#aggrego "Technology Demonstration" in "Technology Development"
id=which(data$Purpose=="Technology Demonstration")
data$Purpose[id]="Technology Development"
data$Purpose <- droplevels(data$Purpose)
table(data$Purpose)
#VARIABILE CONTINENT
table(data$Continent)
library(readxl)
types = rep('guess',68)
types[20] = 'date'
datainiz <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE, col_types = types )
data1 <- read_excel("../Dataset/UCS-Satellite-Database-1-1-2023.xlsx", col_names = TRUE, col_types = types)
data2 <- read.csv("../Dataset/satcat.csv", header = TRUE)
# Trova gli indici in cui gli elementi nei due vettori sono uguali
id1 <- which(datainiz$`COSPAR Number` %in% data2$OBJECT_ID)
id2 <- which(data2$OBJECT_ID %in% data1$`COSPAR Number`)
#prendo solo colonne OBJECT_ID e DECAY_DATE
data2 <- data2[id2,c(2,9)]
#tolgo le osservazioni senza DECAY_DATE
id <- which(data2$DECAY_DATE == "")
data2 <- data2[-id,]
#ricalcolo indice in cui gli elementi nei due vettori sono uguali
id1 <- which(data1$`COSPAR Number` %in% data2$OBJECT_ID)
columns_to_remove <- c("Name of Satellite, Alternate Names", "Country/Org of UN Registry", "Operator/Owner", "Detailed Purpose", "Type of Orbit", "Contractor", "Launch Site", "Launch Vehicle", "COSPAR Number", "NORAD Number", "Comments", "...32", "Source Used for Orbital Data", "Source...34", "Source...35", "Source...36", "Source...37", "Source...38", "Source...39", "Source...40")
#tolgo colonne inutili
data1 <- data1[, -c(which(names(data1) %in% columns_to_remove), 41:68)]
data1 <- data1[, -c(17:24)]
# per i satelliti in comune inserisco nella Disposal Date le Decay_Date del sat
data1$`Disposal Date` <- vector("character", length = nrow(data1))
data1$`Disposal Date`[id1] <- data2$DECAY_DATE
id <- which(data1$`Disposal Date` == "")
# dataset con disposal date
data1 <- data1[-id,]
# prendo dataset aggiustato precedentemente
datanostro <- read_excel("../Dataset/Data_Satellites.xlsx", col_names = TRUE)
id <- which(data1$`Current Official Name of Satellite` %in% datanostro$`Satellite Name`)
data1$`Dry Mass (kg.)` <- as.numeric(data1$`Dry Mass (kg.)`)
data1$`Longitude of GEO (degrees)` <- as.numeric(data1$`Longitude of GEO (degrees)`)
columns_to_remove <- c("Power (watts)", "Dry Mass (kg.)")  # TOGLIAMO DRY MASS e power
data1 <- data1[, -which(names(data1) %in% columns_to_remove)]
#aggiungo status e effective lifetime
data1$Status <- 'retired'
data1$`Effective Lifetime` <- vector("character", length = nrow(data1))
# creo subset del dataset (satelliti dal sat da aggiungere a data1)
sat.da.agg.a.data1 <- datanostro[-id,]
id1 <- which(sat.da.agg.a.data1$`Satellite Name` %in% datainiz$`Current Official Name of Satellite`)
# aggiungo launch mass
sat.da.agg.a.data1$'Lunch Mass kg(.)' <- vector("character", length = nrow(sat.da.agg.a.data1))
sat.da.agg.a.data1$`Lunch Mass kg(.)` <- datainiz$`Launch Mass (kg.)`[id1]
names(data1) <- c("Satellite Name", "Country", "Users", "Purpose", "Orbit", "Longitude of GEO","Perigee", "Apogee", "Eccentricity", "Inclination", "Period", "Mass", "Launch Date","Expected Lifetime",  "Final Date", "Status", "Effective Lifetime")
names(sat.da.agg.a.data1) <- c("Satellite Name" ,    "Country"  ,          "Users"   ,           "Purpose"   ,         "Orbit"     ,
"Longitude of GEO"  , "Perigee"  ,          "Apogee"    ,         "Eccentricity"  ,     "Inclination"  ,
"Period"      ,       "Mass"        ,       "Launch Date"   ,     "Status"        ,     "Final Date"      ,
"Effective Lifetime" ,"Expected Lifetime" , "Continent"     ,     "Mass" )
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-18] # Rimuovo continent
sat.da.agg.a.data1<-sat.da.agg.a.data1[,-12] # Rimuovo dry mass
# rendo uguali i nomi delle colonne
data1<- data1[, names(sat.da.agg.a.data1)]
data1$Apogee <- as.numeric(data1$Apogee)
#data1$`Launch Date`<-as.Date(data1$`Launch Date`)
sat.da.agg.a.data1$`Final Date`<-as.character(sat.da.agg.a.data1$`Final Date`)
data1$`Effective Lifetime`<-as.numeric(data1$`Effective Lifetime`)
library(dplyr)
#concateno
joinData <- bind_rows(sat.da.agg.a.data1,data1)
table(joinData$Status)
# Caricare la libreria
library(openxlsx)
path = "C:/Users/alessandro/Documents/GitHub/NPS_project/Src"
# Scrivere il dataframe nel file Excel
write.xlsx(joinData,path, rowNames = FALSE)
# per lettura dataset se prendi file da github
library(readxl)
data <- read_excel("../Dataset/JoinDatasets.xlsx", col_names = TRUE)
data$Country[which(data$Country == "China/France")] <- "China"
data$Country[which(data$Country == "India/France")] <- "India"
data$Country[which(data$Country == "Japan/Singapore")] <- "Japan"
data$Country[which(data$Country == "Poland/UK")] <- "Poland"
data$Country[which(is.na(data$Continent))]
data$Continent[which(is.na(data$Continent))] <- "Asia"
data$Users[which(data$Users == "Civil/Government")] <- "Civil"
data$Users[which(data$Users == "Commercial/Civil")] <- "Commercial"
data$Users[which(data$Users == "Government/Civil")] <- "Government"
data$Users[which(data$Users == "Government/Commercial")] <- "Government"
data$Users[which(data$Users == "Military/Civil")] <- "Military"
data$Purpose[which(data$Purpose == "Communications/Technology Development")] <- "Communications"
data$Purpose[which(data$Purpose == "Earth Observation/Technology Development")] <- "Earth Observation"
data$Purpose[which(data$Purpose == "Earth/Space Observation")] <- "Earth Observation"
data$Country <- factor(data$Country, ordered = F)
print('Country')
table(data$Country)
data$Users <- factor(data$Users, ordered = F)
print('Users')
table(data$Users)
data$Purpose <- factor(data$Purpose, ordered = F)
print('Purpose')
table(data$Purpose)
data$Orbit <- factor(data$Orbit, ordered = F)
print('Orbit')
table(data$Orbit)
data$Status <- factor(data$Status, ordered = F)
print('Status')
table(data$Status)
data$Continent <- factor(data$Continent, ordered = F)
print('Continent')
table(data$Continent)
df <- data.frame()
for (colonna in colnames(data)) {
conteggio_na <- sum(is.na(data[[colonna]]))
df <- rbind(df, data.frame(Colonna = colonna, Numero_di_NA = conteggio_na))
}
df
cols <- c("Period", "Launch Date", "Mass")
data <- data[complete.cases(data[, cols]), ]
class(data$`Final Date`)
data$`Final Date` <- as.Date(data$`Final Date`)
data$`Final Date` <- as.POSIXct(data$`Final Date`)
class(data$`Final Date`)
data$`Effective Lifetime` <- round(as.numeric(data$`Final Date` - data$`Launch Date`)/365, digit = 2)
# Eliminare satelliti con tempi di vita effettivi negativi
data<- data[-which(data$`Effective Lifetime` < 0),]
df <- data.frame()
for (colonna in colnames(data)) {
conteggio_na <- sum(is.na(data[[colonna]]))
df <- rbind(df, data.frame(Colonna = colonna, Numero_di_NA = conteggio_na))
}
df
# VARIABILE PURPOSE
table(data$Purpose)
#tolgo l'osservazione con purpose unknown
id=which(data$Purpose=="Unknown")
data=data[-id,]
data$Purpose <- droplevels(data$Purpose)
# aggrego "Earth Science", "Educational" e "Surveillance" in "Earth Observation"
id=which(data$Purpose=="Earth Science")
data$Purpose[id]="Earth Observation"
id=which(data$Purpose=="Educational")
data$Purpose[id]="Earth Observation"
id=which(data$Purpose=="Surveillance")
data$Purpose[id]="Earth Observation"
data$Purpose <- droplevels(data$Purpose)
#aggrego "Technology Demonstration" in "Technology Development"
id=which(data$Purpose=="Technology Demonstration")
data$Purpose[id]="Technology Development"
data$Purpose <- droplevels(data$Purpose)
table(data$Purpose)
#VARIABILE CONTINENT
table(data$Continent)
data=data[sample(nrow(data)),]
head(data)
dim(data)
#tolgo le osservazioni senza expected lifetime
id=which(is.na(data$`Expected Lifetime`))
data=data[-id,]
B = 1e3
seed = 26111992
explife = data$`Expected Lifetime`
continent = as.factor(data$Continent)
g = nlevels(continent)
n = dim(data)[1]
plot(continent, explife, xlab='continent',col=rainbow(g),main='Original Data')
fit_c <- aov(explife ~ continent)
summary(fit_c)
T0 <- summary(fit_c)[[1]][1,4]  # extract the test statistic
T0
T_stat <- numeric(B)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
explife_perm <- explife[permutation]
fit_perm <- aov(explife_perm ~ continent)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,20))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val #0.01
purpose = as.factor(data$Purpose)
g = nlevels(purpose)
n = dim(data)[1]
plot(purpose, explife, xlab='purpose',col=rainbow(g),main='Original Data')
fit_p <- aov(explife ~ purpose)
summary(fit_p)
T0 <- summary(fit_p)[[1]][1,4]  # extract the test statistic
T0
T_stat <- numeric(B)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
explife_perm <- explife[permutation]
fit_perm <- aov(explife_perm ~ purpose)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,80))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val #0
users = as.factor(data$Users)
g = nlevels(users)
n = dim(data)[1]
plot(users, explife, xlab='users',col=rainbow(g),main='Original Data')
fit_u <- aov(explife ~ users)
summary(fit_u)
T0 <- summary(fit_u)[[1]][1,4]  # extract the test statistic
T0
T_stat <- numeric(B)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
explife_perm <- explife[permutation]
fit_perm <- aov(explife_perm ~ users)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,80))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val #0
summary.aov(aov(explife ~ continent + purpose + continent:purpose)) #interaction is not significant
T0_cp <- summary.aov(aov(explife ~ continent + purpose + continent:purpose))[[1]][3,4]
T0_cp
aov.H0cp <- aov(explife ~ continent + purpose) #reduced model
aov.H0cp
residuals.H0cp <- aov.H0cp$residuals
T_cp<- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0cp <- residuals.H0cp[permutation]
explife.perm.H0cp <- aov.H0cp$fitted + residuals.H0cp
T_cp[perm] <- summary.aov(aov(explife.perm.H0cp ~ continent + purpose + continent:purpose))[[1]][3,4]
}
sum(T_cp >= T0_cp)/B
summary.aov(aov(explife ~ users + purpose + users:purpose))
T0_cp <- summary.aov(aov(explife ~ users + purpose + users:purpose))[[1]][3,4]
T0_cp
aov.H0cp <- aov(explife ~ users + purpose) #reduced model
aov.H0cp
residuals.H0cp <- aov.H0cp$residuals
T_cp<- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0cp <- residuals.H0cp[permutation]
explife.perm.H0cp <- aov.H0cp$fitted + residuals.H0cp
T_cp[perm] <- summary.aov(aov(explife.perm.H0cp ~ users + purpose + users:purpose))[[1]][3,4]
}
sum(T_cp >= T0_cp)/B
mu <- 11.27487
sig <- 4.2712
predlife <- rnorm(n, mu, sig)
alpha=0.05
p.value <- wilcox.test(explife,y=predlife, paired=F, conf.level = 1-alpha)$p.value
p.value
p.value <- wilcox.test(explife,y=predlife, paired=T, conf.level = 1-alpha)$p.value
p.value
perm_t_test=function(x,y,iter=1e3){ #conditional MC -> n.iterations
T0=abs(mean(x)-mean(y))  # define the test statistic
T_stat=numeric(iter) # a vector to store the values of each iteration
x_pooled=c(x,y) # pooled sample
n=length(x_pooled)
n1=length(x)
for(perm in 1:iter){ # loop for conditional MC
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- abs(mean(x1_perm) - mean(x2_perm))
}
# p-value
p_val <- sum(T_stat>=T0)/iter
return(p_val)
}
p.value <- perm_t_test(explife, predlife)
p.value
t1=explife
t2=predlife
p=1
n1=n
n2=n
t1.mean <- mean(t1)
t2.mean <- mean(t2)
t1.cov  <-  var(t1)
t2.cov  <-  var(t2)
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)  # pooled cov matrix
Spinv   <- solve(Sp)
delta.0 <- 0
diff <- t1-t2
diff.mean <- mean(diff)
diff.cov <- var(diff)
diff.invcov <- solve(diff.cov)
T20 <- as.numeric(t(diff.mean-delta.0)  %*% (diff.mean-delta.0))
T2 <- numeric(B)
for(perm in 1:B)
{
# Random permutation
# obs: exchanging data within couples means changing the sign of the difference
signs.perm <- rbinom(n1, 1, 0.5)*2 - 1
diff_perm <- diff * matrix(signs.perm,nrow=n1,ncol=p,byrow=FALSE)
diff.mean_perm <- mean(diff_perm)
diff.cov_perm <- cov(diff_perm)
diff.invcov_perm <- solve(diff.cov_perm)
T2[perm] <- as.numeric(t(diff.mean_perm-delta.0) %*% (diff.mean_perm-delta.0))
}
hist(T2,xlim=range(c(T2,T20)),breaks=100)
abline(v=T20,col=3,lwd=4)
plot(ecdf(T2))
abline(v=T20,col=3,lwd=4)
p_val <- sum(T2>=T20)/B
p_val
T20 <- norm(as.matrix(mean(t1) - mean(t2)))
T2 <- numeric(B)
t.full <- rbind(t1, t2)
for(perm in 1:B)
{
# Random permutation
# N.B. exchangeability is only within pairs
perm.indices.t1 <- seq(1, n) + n * rbinom(n,1, 0.5)
t1.perm <- t.full[perm.indices.t1]
t2.perm <- t.full[-perm.indices.t1]
T2[perm] <- norm(as.matrix(((mean(t1.perm)) - mean(t2.perm))))
}
hist(T2,xlim=range(c(T2,T20)),breaks=100)
abline(v=T20,col=3,lwd=4)
plot(ecdf(T2))
abline(v=T20,col=3,lwd=4)
# p-value
p_val <- sum(T2>=T20)/B
p_val
